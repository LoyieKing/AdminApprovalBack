// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(AabDbContext))]
    [Migration("20210408120307_UpdateApprovalTable")]
    partial class UpdateApprovalTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ApprovalTableEntityOrganizeEntity", b =>
                {
                    b.Property<int>("ApprovalTablesId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerOrganizesId")
                        .HasColumnType("int");

                    b.HasKey("ApprovalTablesId", "OwnerOrganizesId");

                    b.HasIndex("OwnerOrganizesId");

                    b.ToTable("ApprovalTableEntityOrganizeEntity");
                });

            modelBuilder.Entity("Data.Entity.Approval.ApprovalTableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("ApprovalTableEntity");
                });

            modelBuilder.Entity("Data.Entity.Approval.InfoClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovalTableEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<int>("ExpiredDays")
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Reusable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalTableEntityId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("InfoClassEntity");
                });

            modelBuilder.Entity("Data.Entity.Business.ApprovalInstanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppprovalTableId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppprovalTableId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApprovalInstanceEntity");
                });

            modelBuilder.Entity("Data.Entity.Business.InfoInstanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovalInstanceEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<int?>("InfoClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalInstanceEntityId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("InfoClassId");

                    b.HasIndex("LastModifyUserId");

                    b.HasIndex("UserId");

                    b.ToTable("InfoInstanceEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("OrganizeCategoryEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("OrganizeEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvailableApprovals")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AvailableMenus")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrganizeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizeDutyLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.HasIndex("OrganizeCategoryId");

                    b.ToTable("RoleEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("EnabledMark")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAdministrator")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.UserOrganizeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<int>("DutyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.HasIndex("OrganizeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizeEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemSecurity.DbBackupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BackupTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BackupType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("DbName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("DbBackupEntity");
                });

            modelBuilder.Entity("Data.Entity.SystemSecurity.LogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifyUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Result")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("LastModifyUserId");

                    b.ToTable("LogEntity");
                });

            modelBuilder.Entity("ApprovalTableEntityOrganizeEntity", b =>
                {
                    b.HasOne("Data.Entity.Approval.ApprovalTableEntity", null)
                        .WithMany()
                        .HasForeignKey("ApprovalTablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entity.SystemManage.OrganizeEntity", null)
                        .WithMany()
                        .HasForeignKey("OwnerOrganizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entity.Approval.ApprovalTableEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.Approval.InfoClassEntity", b =>
                {
                    b.HasOne("Data.Entity.Approval.ApprovalTableEntity", null)
                        .WithMany("InfoClasses")
                        .HasForeignKey("ApprovalTableEntityId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.Business.ApprovalInstanceEntity", b =>
                {
                    b.HasOne("Data.Entity.Approval.ApprovalTableEntity", "AppprovalTable")
                        .WithMany()
                        .HasForeignKey("AppprovalTableId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppprovalTable");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.Business.InfoInstanceEntity", b =>
                {
                    b.HasOne("Data.Entity.Business.ApprovalInstanceEntity", null)
                        .WithMany("InfoInstances")
                        .HasForeignKey("ApprovalInstanceEntityId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.Approval.InfoClassEntity", "InfoClass")
                        .WithMany()
                        .HasForeignKey("InfoClassId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "User")
                        .WithMany("InfoInstances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("InfoClass");

                    b.Navigation("LastModifyUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeCategoryEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.OrganizeCategoryEntity", "Category")
                        .WithMany("Organizes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.HasOne("Data.Entity.SystemManage.OrganizeEntity", "Parent")
                        .WithMany("SubOrganizes")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.RoleEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.HasOne("Data.Entity.SystemManage.OrganizeCategoryEntity", "OrganizeCategory")
                        .WithMany()
                        .HasForeignKey("OrganizeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");

                    b.Navigation("OrganizeCategory");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.UserEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.UserOrganizeEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.HasOne("Data.Entity.SystemManage.OrganizeEntity", "Organize")
                        .WithMany("Users")
                        .HasForeignKey("OrganizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "User")
                        .WithMany("Organizes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");

                    b.Navigation("Organize");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.SystemSecurity.DbBackupEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.SystemSecurity.LogEntity", b =>
                {
                    b.HasOne("Data.Entity.SystemManage.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("Data.Entity.SystemManage.UserEntity", "LastModifyUser")
                        .WithMany()
                        .HasForeignKey("LastModifyUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("LastModifyUser");
                });

            modelBuilder.Entity("Data.Entity.Approval.ApprovalTableEntity", b =>
                {
                    b.Navigation("InfoClasses");
                });

            modelBuilder.Entity("Data.Entity.Business.ApprovalInstanceEntity", b =>
                {
                    b.Navigation("InfoInstances");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeCategoryEntity", b =>
                {
                    b.Navigation("Organizes");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.OrganizeEntity", b =>
                {
                    b.Navigation("SubOrganizes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entity.SystemManage.UserEntity", b =>
                {
                    b.Navigation("InfoInstances");

                    b.Navigation("Organizes");
                });
#pragma warning restore 612, 618
        }
    }
}
